Script started on 2024-06-21 02:39:24+00:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="49" LINES="27"]
(env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]#!/bin/bash

# Update and install dependencies
sudo apt update
sudo apt install -y python3-pip python3-venv libpq-dev postgresql postgresql-contrib

# Set up PostgreSQL
sudo -u postgres psql -c "CREATE DATABASE business_db;"
sudo -u postgres psql -c "CREATE USER business_user WITH PASSWORD 'password';"
sudo -u postgres psql -c "ALTER ROLE business_user SET client_encoding TO 'utf8';"
sudo -u postgres psql -c "ALTER ROLE business_user SET default_transaction_isolation TO 'read committed';"
sudo -u postgres psql -c "ALTER ROLE business_user SET timezone TO 'UTC';"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE business_db TO business_user;"

# Create and activate virtual environment
python3 -m venv env
source env/bin/activate

# Install Django and other dependencies
pip install django djangorestframework psycopg2-binary

# Create Django project
django-admin startproject business_management_system backend
cd backend

# Create Django apps
python manage.py startapp core
python manage.py startapp hospital
python manage.py startapp retail
python manage.py startapp school

# Create requirements.txt
pip freeze > requirements.txt

# Populate settings.py
cat <<EOL > business_management_system/settings.py
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'your-secret-key'
DEBUG = True
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'core',
    'hospital',
    'retail',
    'school',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'business_management_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'business_management_system.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'business_db',
        'USER': 'business_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

STATIC_URL = '/static/'
EOL

# Create and populate core/models.py
cat <<EOL > core/models.py
from django.db import models

class BaseModel(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True
EOL

# Create and populate hospital/models.py
cat <<EOL > hospital/models.py
from django.db import models
from core.models import BaseModel

class Patient(BaseModel):
    name = models.CharField(max_length=255)
    date_of_birth = models.DateField()
    medical_record_number = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Appointment(BaseMo(env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]d(env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]el):
    patient = models.ForeignKey(Patient, on_d[0;93mTools like apt, brew, and yum
which modify system dependencies are not
directly callable inside Replit. We offer the
[1;93mîº§SystemÂ Dependencies[0;93m pane for
easy dependency management.

For more information, please check
https://docs.replit.com/replit-workspace/add-system-dependencies
, and don't forget to indicate whether you
found the documentation helpful at the bottom
of the page!
[0m
(env) \[]133;D;1\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]elete=models.CASCADE)
    date = models.DateTimeField()
    reason = models.TextField[0;93mTools like apt, brew, and yum
which modify system dependencies are not
directly callable inside Replit. We offer the
[1;93mîº§SystemÂ Dependencies[0;93m pane for
easy dependency management.

For more information, please check
https://docs.replit.com/replit-workspace/add-system-dependencies
, and don't forget to indicate whether you
found the documentation helpful at the bottom
of the page!
[0m
(env) \[]133;D;1\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;1\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;1\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]()

    def __str__(self):
        return f"{self.patient.name} - {self.date}/nix/store/8wx2f3wh13k326mridmpkhmikygvw5mv-replit-runtime-path/bin/sudo: line 41: exec: psql: not found
(env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]"
EOL

# Create and populate retail/models.py
cat <<EOL > retail/models.py
from/nix/store/8wx2f3wh13k326mridmpkhmikygvw5mv-replit-runtime-path/bin/sudo: line 41: exec: psql: not found
(env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\] django.db import models
from core.models import BaseModel

class Product(BaseModel/nix/store/8wx2f3wh13k326mridmpkhmikygvw5mv-replit-runtime-path/bin/sudo: line 41: exec: psql: not found
(env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]):
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_place/nix/store/8wx2f3wh13k326mridmpkhmikygvw5mv-replit-runtime-path/bin/sudo: line 41: exec: psql: not found
(env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]s=2)
    stock = models.IntegerField()

    def __str__(self):
        retu/nix/store/8wx2f3wh13k326mridmpkhmikygvw5mv-replit-runtime-path/bin/sudo: line 41: exec: psql: not found
(env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]rn self.name

class Order(BaseModel):
    product = models.ForeignKey(Product, on_delete=m/nix/store/8wx2f3wh13k326mridmpkhmikygvw5mv-replit-runtime-path/bin/sudo: line 41: exec: psql: not found
(env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]odels.CASCADE)
    quantity = models.IntegerField()
    total_p(env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]rice = models.DecimalFiesh: 17: source: not found
(env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]ld(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"Order {self.id} - {[31mERROR: Can not perform a '--user' install. User site-packages are not visible in this virtualenv.[0m[31m
[0m(env) \[]133;D;1\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;1\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;1\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]self.product.name}"
EOL

# Create and populate school/models.py
cat <<EOL > school/modsh: 23: django-admin: not found
(env) \[]133;D;127\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]els.py
fromsh: 24: cd: can't cd to backend
(env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\] (env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]django.db import mode(env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]ls
from core.models import Basepython: can't open file '/home/runner/bms/manage.py': [Errno 2] No such file or directory
(env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]Model

class Student(BaseModel):
  python: can't open file '/home/runner/bms/manage.py': [Errno 2] No such file or directory
(env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]  name = models.CharField(max_lenpython: can't open file '/home/runner/bms/manage.py': [Errno 2] No such file or directory
(env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]gth=255)
    enrollment_number = python: can't open file '/home/runner/bms/manage.py': [Errno 2] No such file or directory
(env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]models.CharField(max_length=100)
    date_of_birth = mode(env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]> > > ls.DateField(> )

    def __str__(self):
    >     return self.name

class Course(BaseModel):> 
    name = models.CharField(max_length=255)
    description = models.TextField()

    def __str__(self):
 > > > >        > return self.name
EOL

#>  Create serializers for hosp> ital app
mkdir -p ho> spital/serializers
ca> t <<EOL > hospital/serializers.py
from re> st_framework import > serializers
from .models import Patien> t, Appointment

class PatientSeriali> zer(serialize> rs.ModelSerializer):
    class Meta:
     >    model = Pat> ien> t
        field> s = '__all__'

class AppointmentSerializer(serializer> > > > s.ModelSerializer):
    class > Meta:
        model = Appointment
     >    fields = '__all__'
EOL

# Create serial> izers for retail app
mkdir -p > retail/serializer> s
cat <<EOL > retail/serializers.py
f> rom rest_framework import serializers
from .models import Product, Order

class ProductSerializer(serializers.ModelSerializer):
    c> lass Meta:
        model = Prod> uct
        fields = '__all__'
> 
class OrderSerializer(serializer> s.ModelSerializer):
    class Meta:> 
        model = Order> 
        fields = '__all__'
EOL

> # Create serializer> s for school app
mkdir -p school/seriali> zers
cat <<EOL > > school/serializers.py
from rest_framewo> rk import serializers
from .models import Stu> dent, Course

class StudentSe> rializer(seria> lizers.ModelSerializer):
    cl> ass Meta:
        model = Stude> nt
        fields = '__all__'
> 
class CourseSerializer(serializers.ModelSeri> alizer):
    class>  Meta:
        model = Course
        fields = '__all__'
EOL

# Create views for hospital > > > > > app
mkdir -p hospital> /views
cat <<EOL > hospital/views.py
from>  rest_framework import viewsets
from .models import > Patient, Appointment
from .serializers> >  import Pati> entSerializer, AppointmentSerializer

> class PatientViewSet> (viewsets.ModelViewSet):
    queryset = Patient.objects.all()
    serializer_class = PatientSerializer

class AppointmentViewSe> > > > > > t(viewsets.ModelViewS> > et):
    queryset = Appointment.objects.all()
    serializer_class = AppointmentSerializer
EOL

# Create views for retail app
mkdir -p retail/views
cat <<EOL > retail/views.py
from re> > > > > st_framework import viewsets
from .m> odels import Product, Order
from > .serialize> rs import Produ> ctSerializer, OrderSerializer

c> lass ProductViewSet(viewsets.Mode> lViewSet)> :
    queryset = Product.objects.all()
    (env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]serializer_class = ProductSerializer

(env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]> class > OrderViewSet(viewsets.ModelViewSet):
    queryset => >  Order.obj> ects.all()
    serial> izer_class = OrderSerializer
EOL> 

# Create views for school app
> mkdir -p school/views
cat <<EOL > > school/views.py
from rest_framework import viewsets
from sh: 125: cannot create core/models.py: Directory nonexistent
(env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\].model(env) \[]133;D;2\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]s import Student, Course
from .seria> lizers import StudentSerializer, > CourseSerializer

cla> ss Stu> dentViewSet(viewsets.ModelViewSet):> 
    queryset = Student.ob> jects.all()
    serializer_class = StudentSe> rializer

class CourseViewSet(> viewsets.> ModelViewSet):
    quer> yset = Course.objects.all()> 
    seriali> zer_class = CourseSerializer
> EOL

# Create urls f> or hospital app
mkdir -p hospital/urls
cat <> <EOL > > hospital/urls.py
from django.urls import pa> th, include
> from rest_framework.routers import DefaultRouter
from .views im> port PatientViewSet, AppointmentViewSet

router = DefaultRouter()
router.r(env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]egister(r'patients', PatientViewSe(env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]t)
router.register(r> 'appointments',>  AppointmentViewSet)

urlpatt> erns = [
    path('', include(r> outer.urls)),
]
EOL

# Create > > > > urls > for retail app
mkdir -> > > p retail/urls
cat <<EOL > retail/ur> ls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import ProductViewSet, OrderViewSet

router = Defa> ultRouter()
router.register(r'products', ProductViewSet)
> router.register(r'orders', OrderViewSet)
> 
urlpatterns = [
    path('', include(router.u> rls)),
]
EOL

# Create urls for>  school app
mkdir -p school/urls> (env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]> > > > > > > > > > > > > > > > > > (env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]> > > > > > > > > > > > > (env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\]> > > > > > > > > > > > > (env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]133;A\]\[\033[01;34m\]\w\[\033[00m\]$ \[]133;B\](env) \[]133;D;0\]\[]13